% Benchmark for recursively partitioning meshes, based on various
% bisection approaches
%
% D.P & O.S for the "HPC Course" at USI and
%                   "HPC Lab for CSE" at ETH Zurich



% add necessary paths
addpaths_GP;
nlevels_a = 3;
nlevels_b = 4;

fprintf('       *********************************************\n')
fprintf('       ***  Recursive graph bisection benchmark  ***\n');
fprintf('       *********************************************\n')

% load cases
cases = {
    'airfoil1.mat';
    'netz4504_dual.mat';
    'stufe.mat';
    '3elt.mat';
    'barth4.mat';
    'ukerbe1.mat';
    'crack.mat';
    };

nc = length(cases);
maxlen = 0;
for c = 1:nc
    if length(cases{c}) > maxlen
        maxlen = length(cases{c});
    end
end

for c = 1:nc
    fprintf('.');
    sparse_matrices(c) = load(cases{c});
end


fprintf('\n\n Report Cases         Nodes     Edges\n');
fprintf(repmat('-', 1, 40));
fprintf('\n');
for c = 1:nc
    spacers  = repmat('.', 1, maxlen+3-length(cases{c}));
    [params] = Initialize_case(sparse_matrices(c));
    fprintf('%s %s %10d %10d\n', cases{c}, spacers,params.numberOfVertices,params.numberOfEdges);
end

%% Create results table
fprintf('\n%7s %16s %20s %16s %16s\n','Bisection','Spectral','Metis 5.0.2','Coordinate','Inertial');
fprintf('%10s %10d %6d %10d %6d %10d %6d %10d %6d\n','Partitions',8,16,8,16,8,16,8,16);
fprintf(repmat('-', 1, 100));
fprintf('\n');

visualize = false;

for c = 1:nc
    spacers = repmat('.', 1, maxlen+3-length(cases{c}));
    fprintf('%s %s', cases{c}, spacers);
    sparse_matrix = load(cases{c});
    

    % Recursively bisect the loaded graphs in 8 and 16 subgraphs.
    % Steps
    % 1. Initialize the problem
    [params] = Initialize_case(sparse_matrices(c));
    W      = params.Adj;
    coords = params.coords;
    if visualize == true
    gplotg(W,coords);
    nvtx  = size(W,1);
    nedge = (nnz(W)-nvtx)/2;
    xlabel([int2str(nvtx) ' vertices, ' int2str(nedge) ' edges'],'visible','on');
    % 2. Recursive routines


    % i. Spectral    
    [maps8,sepijs8,sepAs8] = rec_bisection('bisection_spectral',3,W,coords,0);
    gplotmap(W,coords, maps8);
    pause;
    [maps16,sepijs16,sepAs16] = rec_bisection('bisection_spectral',4,W,coords,0);
    gplotmap(W,coords, maps16);


    % ii. Metis
    [mapm8,sepijm8,sepAm8] = rec_bisection('bisection_metis',3,W,coords,0);
    %gplotmap(W,coords, mapm8);
    %pause;
    [mapm16,sepijm16,sepAm16] = rec_bisection('bisection_metis',4,W,coords,0);
    %gplotmap(W,coords, mapm16);
    %pause;


    % iii. Coordinate 
    [mapc8,sepijc8,sepAc8] = rec_bisection('bisection_coordinate',3,W,coords,0);
    %gplotmap(W,coords, mapc8);
    %pause;
    [mapc16,sepijc16,sepAc16] = rec_bisection('bisection_coordinate',4,W,coords,0);
    %gplotmap(W,coords, mapc16);
    %pause;


    % iv. Inertial
    [mapi8,sepiji8,sepAi8] = rec_bisection('bisection_inertial',3,W,coords,0);
    %gplotmap(W,coords, mapi8);
    %pause;
    [mapi16,sepiji16,sepAi16] = rec_bisection('bisection_inertial',4,W,coords,0);
    %gplotmap(W,coords, mapi16);
    %pause;
    
    
    fprintf('%6d %6d %10d %6d %10d %6d %10d %6d\n',size(sepijs8, 1),size(sepijs8, 1), ...
        size(sepijm8, 1),size(sepijm16, 1),size(sepijc8, 1),size(sepijc16, 1),size(sepiji8, 1),size(sepiji16, 1));
    
end
